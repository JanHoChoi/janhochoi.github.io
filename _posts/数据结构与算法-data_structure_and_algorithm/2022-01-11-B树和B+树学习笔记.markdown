---
layout: post
title: B树和B+树学习笔记
date:  2022-01-07 20:00:00 +0800
description: B树和B+树学习笔记。
img: btree_logo.png # Add image post (optional)
tags: [数据结构与算法]
author: # Add name author (optional)
data_structure_and_algorithm: true
---

{{site.label1}} <a href="https://github.com/janhochoi/" target="\_blank">JanHoChoi</a> {{site.label2}}

# B树和B+树学习笔记

## 共同目的

B树和B+树，他们和传统的二叉树比较，特点是平衡、树的高度小、节点数据多（更加“矮胖”）。

他们设计的目的，是因为在数据库等应用里面，不能将所有数据放在一个内存里面，需要分页，把数据存在硬盘块中，而像二叉树这种高瘦的树结构，在查询深度较大的数据时，需要经历多次磁盘I/O。

而单次I/O操作耗时比单次CPU操作多得多，所以为了尽量减少I/O次数，设计出了B树和B+树。

## B树

### 定义

一个m阶（节点最多有m个子分支/子节点）B树需要满足一下条件：

- 除根节点以外，其他每个非叶子节点有至少$$\lceil\frac{m}{2}\rceil$$个，至多$$m$$个子节点；
- 根节点有至少$$2$$个，至多$$m$$个子节点，除非它本身就是叶子节点；
- 有$$k$$个子节点的非叶子节点拥有$$k-1$$个key；该节点的第$$i$$个key一定比第$$i+1$$个子节点下的所有key更小；
- 所有叶节点在同一层（深度相同，为了避免非平衡树），并且不携带任何key-value信息，只有数据item；
- 所有叶节点有最少$$\lceil\frac{L}{2}\rceil$$个，最多$$L$$个数据item；

> L和M是怎么定义来？
>
> > 一个节点可以视作一个硬盘块。比如一个硬盘块有8192字节。
> >
> > M的取值一般由硬盘块大小与key的大小决定；其中需要存M-1个key和M个子节点（每个子节点当做1个指针），1个key占32字节，所以加起来就是36M-32个字节<=8192，算出来M<=228.444，所以M最多只能取228。
> >
> > L的取值一般由硬盘块大小与数据item大小决定；item一个占256字节，那L最多只能取32。
> >
> > 如果M取228，而L取32的话，每个分支节点（除了根节点外），至少有114个分支；假设有10000000个item，则最多有625000个叶子节点。在最差情况下，深度=$$log_{M/2}N$$≈3.243=4。

### 操作



![image-20220112001454866](/Users/zhanghaocai/Documents/GitHub/janhochoi.github.io/assets/img/image-20220112001454866.png)

其中M=5。而叶子有3-5个data，所以L取值也为5。

